.output "clock.go"
.ignorecase = 0
package clockgsl
import (
  "time"
  "fmt"
  "math"
)

type supplier interface {
	FractionOfDayPassed() float64
}

func floatingModulo(fractionOfDayPassed float64, resetFraction float64) float64 {
	division := math.Floor(fractionOfDayPassed / resetFraction )
	return (fractionOfDayPassed - (division * resetFraction))
}


.for clock
func get$(name:neat)(fractionOfDayPassed float64) string {
. if count(outputfield) > 0
    resetFraction := 1.0 * $(resetfraction ? 1.0)
   
    resetFractionOfDayPassed := floatingModulo(fractionOfDayPassed, resetFraction)
. endif
. printvars = ""
. for field
. printvars = printvars + ", $(name)"
    $(name) := time.Now().$(name)()
. endfor
. for digit
. printvars = printvars + ", $(name)"
    $(name)collection := []string{\
. for element
"$(element)",\
. endfor
    }
    $(name)idx := int(math.Mod(math.Floor((fractionOfDayPassed) / (1.0 * $(dayfraction))),float64(len($(name)collection))))
    $(name) := $(name)collection[$(name)idx]
. endfor
. for outputfield
	$(name) := get$(type:neat)OutputElement(resetFractionOfDayPassed, 1.0 * $(dayfraction))
. printvars = printvars + ", $(name)"
. endfor
    return fmt.Sprintf("$(printf)" $(printvars))
}
.endfor


.for outputtypes
.for type
func get$(name:neat)OutputElement(fractionOfDayPassed float64, dayFraction float64) string {
    collection := []string{\
. for element
"$(element)",\
. endfor
}
    idx := int(math.Mod(math.Floor((fractionOfDayPassed) / dayFraction),float64(len(collection))))
    return collection[idx]
}
.endfor
.endfor

.for timezones
.for.timezone
func $(name)Supplier() supplier {
. if "$(isSystemDefault?"false")" = "true"
	return thesupplier { time.Now() }
. else
	location := time.FixedZone("$(name)", $(offset) * 60 * 60)
	return thesupplier{ time.Now().In(location) }
. endif
}
.endfor
.endfor


type thesupplier struct {
	clock time.Time
}
func (self thesupplier) FractionOfDayPassed() float64 {
	nanoSecondsPerDay := float64(24 * 60 * 60 * 1000 * 1000 * 1000)
	round := self.clock.Round(time.Nanosecond)
	midnight := round.Add(-time.Duration(round.Hour()) * time.Hour).Add(-time.Duration(round.Minute()) * time.Minute).Add(-time.Duration(round.Second()) * time.Second).Add(-time.Duration(round.Nanosecond()) * time.Nanosecond)
	return float64(self.clock.Sub(midnight).Nanoseconds()) / nanoSecondsPerDay
}

func GetAllAsString() string {
    out := ""
.for clock
	out = out + fmt.Sprintln(get$(name:neat)($(timezone)Supplier().FractionOfDayPassed()))
.endfor
    return out
}

func GetAllAsJSON() string {
    return fmt.Sprintf(
        `{\
.for clock
"$(name)":"%s",\
.endfor
"tail": "true"}`,
.for clock
		get$(name:neat)($(timezone)Supplier().FractionOfDayPassed()),
.endfor
   )
}

.output "clock_test.go"
package clockgsl
import (
  "strings"
  "strconv"
  "testing"
  "fmt"
)

func timeToDayFraction(timestamp string) (float64, error) {
	timesplit := strings.Split(timestamp, ":")
	if len(timesplit) != 3 {
		return 0.0, fmt.Errorf("Time needs to be in format HH:MM:SS but was %s", timestamp)
	}
	hours, err := strconv.Atoi(timesplit[0])
	if err != nil {
		return 0.0, fmt.Errorf("Time needs to be in format HH:MM:SS but was %s", timestamp)
	}
	mins, err := strconv.Atoi(timesplit[1])
	if err != nil {
		return 0.0, fmt.Errorf("Time needs to be in format HH:MM:SS but was %s", timestamp)
	}
	secs, err := strconv.Atoi(timesplit[2])
	if err != nil {
		return 0.0, fmt.Errorf("Time needs to be in format HH:MM:SS but was %s", timestamp)
	}
	secondsSinceMidnight := float64(hours * 60 * 60 + mins * 60 + secs)
	return secondsSinceMidnight / float64(1.0 * 24 * 60 * 60), nil
}

.for clock
func Test$(name:neat)(t *testing.T) {
	testdata := []struct {
		in string
		out string
	}{
.for tests
.for test
		{ "$(attime)", "$(expect)" },
.endfor
.endfor
	}
        for _, tt := range testdata {
                fraction, err := timeToDayFraction(tt.in)
				if err != nil {
                        t.Errorf("Error: %s", err)
				}
                s := get$(name:neat)(fraction)
                if s != tt.out {
                        t.Errorf("%q => %q, want %q (fraction: %q)", tt.in, s, tt.out, fraction)
                }
        }

}
.endfor
